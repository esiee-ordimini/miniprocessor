% Attention :                                                                                              %
% commentaires exigent caractère pourcentage des 2 cotes !!! %
% pas d'accents pour limiter les problemes d'encodage               %
DEPTH=256;                % Nombre de mots que la mémoire peut mémoriser %
WIDTH=24;                   % Nombre de bits d'un mot  (valeurs décimales) %

ADDRESS_RADIX = HEX; % Base pour les valeurs et les adresses%
DATA_RADIX = HEX;         % Valeurs possibles BIN, DEC, HEX, OCT %

CONTENT
BEGIN
[00..FF] : 000000;        % Valeur par défaut des cases : 0000 %
            		%test    ; Continue uniquement si vn > 0%
00: 010018;			%		MOV		R1, #vn    ; R1 ← @vn     (R0=? , R1=@vn, R3=?)%
01: 040000;			%		LDRB		R0, [R1]   ; R0 ← MEM[@n] (R0=vn, R1=@vn, R3=?)%
02: 030001;			%		MOV		R3, #1     ; R3 ← 0       (R0=vn, R1=@vn, R3=0)%
03: 070000;			%		CMP		R0, R3     ; R0 = 0 ?     (teste si vn = 0)%
04: 080017;			%		BEQ		fin        ;              (si vn = 0 saute à fin)		%	
        			%corps   ; Décrémente vn de 1%

05: 0E0000;			%		SUB		R0, R0, R3 ; R0 ← R0 - 1  (R0=vn-1, R1=@vn, R3=1)%
06: 060000;			%		STRB		R0, [R1]   ; MEM[R1] ← R0%
07: 010019;			%		MOV		R1, #res   ; R1 ← @res      (R0=vn, R1=@res, R3=1)%
08: 040000;			%		LDRB		R0, [R1]   ; R0 ← MEM[@res] (R0=res, R1=@res, R3=1)%
09: 0F0000;			%		AND		R0, R0, R3%
0A: 070000;			%		CMP		R0, R3%
0B: 080010;			%		BEQ		impaire%       			
					%paire%
0C: 040000;			%		LDRB		R0, [R1]%
0D: 100000;			%		LSR		R0, R0, #1%
0E: 060000;			%		STRB		R0, [R1]%
0F: 0B0000;			%		B		test%
        			%impaire%
10: 040000;			%		LDRB		R0, [R1]%
11: 130000;			%		MOV		R3, R0%
12: 120000;			%		ADD		R0, R0, R0%
13: 110000;			%		ADD		R0, R0, R3%
14: 0D0001;			%		ADD		R0, R0,  #1%
15: 060000;			%		STRB		R0, [R1]%
16: 0B0000;			%		B		test%
        			%fin%
17: 0B0017;         		%END		; à mettre obligatoirement en fin de code,%      
18: 000007;			%vn		DCB		6%
19: 00000E;			%res		DCB		14%
END
